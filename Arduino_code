#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
 
// Replace with your network credentials
const char* ssid = "bhai";
const char* password = "abcdabcd";
 
ESP8266WebServer server(80);   //instantiate server at port 80 (http port)
 
String page = "";
int d[8]={16,5,4,0,2,14,12,13};

int i=0;
int data[16];
int out[16];
void setup(void){
  //make the LED pin output and initially turned off
  pinMode(d[0], INPUT);
  pinMode(d[1], INPUT);
  pinMode(d[2], INPUT);
  pinMode(d[3], INPUT);
  pinMode(d[4], INPUT);
  pinMode(d[5], INPUT);
  pinMode(d[6], INPUT);
  pinMode(d[7], INPUT);
  
  delay(1000);
  Serial.begin(115200);
  WiFi.begin(ssid, password); //begin WiFi connection
  Serial.println("");
 
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
   server.on("/", [](){
   server.send(200, "text/html", HomePage());
  });
  server.on("/read", [](){  // for read
    for (i = 0; i < 16; i = i + 1) {
  data[i]=digitalRead(d[i/2]);
  Serial.println(data[i]);
}
    //server.send(200, "text/html", HomePage());
    server.send(200,"text/html",HomePage()+input(data));
  });
 server.on("/uni-nrz", [](){ //Uni-NRZ
    for (i = 0; i < 16; i = i + 1) {
  out[i]=data[i];
}
    server.send(200,"text/html",HomePage()+output(out));
  });

  server.on("/uni-rz", [](){ //Uni RZ
    for (i = 0; i < 16; i = i + 1) {
  out[i]=data[i];
  if(data[i]==1){out[i+1]=0;i=i+1;}
}
    server.send(200,"text/html",HomePage()+output(out));
  });

server.on("/polar-nrz", [](){ //Polar NRZ
    for (i = 0; i < 16; i = i + 1) {
  if(data[i]==1){out[i]=+1;}else out[i]=-1;
}
    server.send(200,"text/html",HomePage()+output(out));
  });

  server.on("/polar-rz", [](){ //Polar RZ
    for (i = 0; i < 16; i = i + 1) {
  if(data[i]==1){out[i]=+1;out[i+1]=-1;i=i+1;}else {out[i]=-1;out[i+1]=-1;i=i+1;}
}
    server.send(200,"text/html",HomePage()+output(out));
  });
server.on("/manchester", [](){ //Manchester
    for (i = 0; i < 16; i = i + 1) {
  if(data[i]==1){out[i]=+1;out[i+1]=-1;i=i+1;}else {out[i]=-1;out[i+1]=1;i=i+1;}
}
    server.send(200,"text/html",HomePage()+output(out));
  });
   server.on("/ami", [](){ //AMI
    int k=0;
    for (i = 0; i < 16; i = i + 1) {
  if((data[i]==1)&&(k==0)){out[i]=+1;out[i+1]=1;i=i+1;k=1;}else if(data[i]==0){out[i]=0;out[i+1]=0;i=i+1;}
  else if((data[i]==1)&&(k==1)){out[i]=-1;out[i+1]=-1;i=i+1;k=0;}
}
    server.send(200,"text/html",HomePage()+output(out));
  });
  server.begin();
  Serial.println("Web server started!");
}//end of setup
 
void loop(void){
  server.handleClient();
}//end of loop

String HomePage() {
  String htmlpage=String("<h1><a href='/'>DC Miniproject</a></h1><br/><a href='/read'><button>Read Data</button></a><br>\r\n<style>h1{font-size:48px!important}button{height:80px;width:400px;font-size:36px}p{font-size:32px;margin:20px}</style>");
  htmlpage+="<a href='/uni-nrz'><button>Unipolar NRZ</button></a>";
  htmlpage+="<a href='/uni-rz'><button>Unipolar RZ</button></a>";
  htmlpage+="<a href='/polar-nrz'><button>Polar NRZ</button></a>";
  htmlpage+="<a href='/polar-rz'><button>Polar RZ</button></a>";
  htmlpage+="<a href='/manchester'><button>Manchester</button></a>";
  htmlpage+="<a href='/ami'><button>A.M.I.</button></a>";
  return htmlpage;
}//end of HTML Response : Home Page
String input(int data[])
{String in="<p><b>Input : </b>";
  for (i = 0; i < 16; i = i + 1) {
  in+=String(data[i]);
}
in+="</p>";
in+="<script src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['corechart']});google.charts.setOnLoadCallback(drawChart);function drawChart() {var data = google.visualization.arrayToDataTable([['', ''],['0',"+String(data[0])+"],['',"+String(data[1])+"],['1',"+String(data[2])+"],['',"+String(data[3])+"],['2',"+String(data[4])+"],['',"+String(data[5])+"],['3',"+String(data[6])+"],['',"+String(data[7])+"],['4',"+String(data[8])+"],['',"+String(data[9])+"],['5',"+String(data[10])+"],['',"+String(data[11])+"],['6',"+String(data[12])+"],['', "+String(data[13])+"],['7', "+String(data[14])+"],['',"+String(data[15])+"]]);var options = { title: 'Graph', curveType: 'function',legend: { position: 'bottom' }};var chart = new google.visualization.SteppedAreaChart(document.getElementById('line_chart'));chart.draw(data, options);}</script>";
in+="<div id='line_chart' style='width: 900px; height: 500px'></div>";
return in+"</p>";
}//end of input

String output(int out[])
{String op = input(data)+"<p><b>Output : </b>";
  for (i = 0; i < 16; i = i + 1) {
  
  op+=String(out[i]);
  
}
op+="</p>";
op+="<script src='https://www.gstatic.com/charts/loader.js'></script><script>google.charts.load('current', {'packages':['corechart']});google.charts.setOnLoadCallback(drawChart);function drawChart() {var data = google.visualization.arrayToDataTable([['', ''],['0',"+String(out[0])+"],['',"+String(out[1])+"],['1',"+String(out[2])+"],['',"+String(out[3])+"],['2',"+String(out[4])+"],['',"+String(out[5])+"],['3',"+String(out[6])+"],['',"+String(out[7])+"],['4',"+String(out[8])+"],['',"+String(out[9])+"],['5',"+String(out[10])+"],['',"+String(out[11])+"],['6',"+String(out[12])+"],['', "+String(out[13])+"],['7', "+String(out[14])+"],['',"+String(out[15])+"]]);var options = { title: 'Graph', curveType: 'function',legend: { position: 'bottom' }};var chart = new google.visualization.SteppedAreaChart(document.getElementById('curve_chart'));chart.draw(data, options);}</script>";
op+="<div id='curve_chart' style='width: 900px; height: 500px'></div>";

return op;
}//end of output
